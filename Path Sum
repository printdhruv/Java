/* Programmer     : Dhruv Patel
*  Problem Name   : Path Sum
*  Used In        : Leetcode
*  Used As        : 112
*  Problem        :
*                    Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all 
*                    the values along the path equals the given sum.
*  For example:
*                    Given the below binary tree and sum = 22,
*                                                 5
*                                                / \
*                                               4   8
*                                              /   / \
*                                             11  13  4
*                                            /  \      \
*                                           7    2      1
*                    return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
*
*  Thoughts       => The given problem can be solved with depth first search from root to leaf nodes.
*                    It's a brute force way to solve problem. In that one, we use iteration from the root
*                    to all leaves in order to count the sum of values along the way and we use extensive
*                    memory in terms of usage to tackle such problem.
*                    The optimised way to recurse the tree from root to node with condition of decrementing the
*                    value from a sum.When we encounter the leave , we check if the sum is zero or not.
*                     
*/
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root != null) sum -= root.val;                                    // If 'root' then decrement the sum
        if (root == null) {
            return false;                                                     // If not 'root' then return false
        }
        if (root.left == null && root.right == null) {                        // If we encounter the leaves then return?sum==0
            return sum == 0;
        }
        return hasPathSum(root.left, sum) | hasPathSum(root.right, sum);      // Recursive way to roll on the tree
    }
}
