/* Programmer     : Dhruv Patel
*  Problem Name   : Happy Number
*  Used In        : Leetcode
*  Used As        : 202
*  Problem        :
*                   Write an algorithm to determine if a number is "happy".
*                   A happy number is a number defined by the following process: Starting with any positive integer, 
*                   replace the number by the sum of the squares of its digits, and repeat the process until the number 
*                   equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. 
*                   Those numbers for which this process ends in 1 are happy numbers.
*  Example        : 19 is a happy number
*                   1^2 + 9^2 = 82
*                   8^2 + 2^2 = 68
*                   6^2 + 8^2 = 100
*                   1^2 + 0^2 + 0^2 = 1
*                   Credits:
*                           Special thanks to @mithmatt and @ts for adding this problem and creating all test cases.
*  Thoughts       => 
*                    Brute Force / Naive Approach :-  
*                  
*/

import java.util.HashSet;
import java.util.Set;

class Solution {
    static Set<Integer> set = new HashSet<>();                                                // Dictionary to compute each result

    public static int reduce(int x) {
        while (x > 9) {                                                                       // We keep normalizing number while it's > 9
            String test = Integer.toString(x);
            int counter = 0;
            for (char c : test.toCharArray()) {
                if (Character.getNumericValue(c) > 0) {
                    counter += (Character.getNumericValue(c) * Character.getNumericValue(c)); // We count square of each digit and skipping 0
                }
            }
            return reduce(counter);
        }
        return x;
    }

    public static boolean isHappy(int n) {                                                    // isHappy returns boolean for magic test
        if (set.contains(n)) {
            return false;
        }

        set.add(n);
 
        while (n >= 1) {                                                                     
            int f = n % 10;                                                                   // f holds the remainder
            int s = n / 10;                                                                   // s holds the divider

            if (f > 9) {
                f = reduce(f);                                                                // Reducing the number if its > 9
            }
            if (s > 9) {
                s = reduce(s);
            }

            if (f + s == 1) {
                return true;                                                                  // We return true if it's sum is 1.
            }
 
            return isHappy((f * f) + (s * s));                                                // Else we keep looking for its squares.
        }
        return false;                                                                         // False if while loop terminates and sum is not 1
    }

    public static void main(String args[]) {
        int i = 0;
        while (i <= Integer.MAX_VALUE) {
            System.out.println(isHappy(i++));
        }
    }
}
