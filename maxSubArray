/* 
*  Programmer     : Dhruv Patel
*  Problem Name   : maxSubArray
*  Used In        : Leetcode
*  Used As        : 53
*  Thoughts     => 
*  Brute Force  
*  O(N^2)           
*                   I tried to show brute force approach to attack the problem. That's the naive approach to see every
*                   possible window and ranges such as [element],[element[i]+element[i+1]] [element[i]+.+element[length-1]]
*                   Everytime we compare the values of each window with the MAX variable. However, it uses O(N^2) time
*                   hence it gives the biggest time penalty for the large set of numbers.
*  O(N)  
*                                      
*/
package com.company;
public class Main {
    public static int maxSubArray_bruteForce(int[] nums) {
        int max = Math.max(Integer.MIN_VALUE,nums[0]);
        for(int i = 0 ; i < nums.length-1 ; i++) {
            max = Math.max(nums[i] , max) ;
            int sum = 0;
            sum += nums[i];
            for(int j = i+1 ; j < nums.length ; j++) {
                max = Math.max(nums[j],max);
                sum += nums[j];
                max = Math.max(sum,max);
            }
        }
        return max;
    }
    public static void main(String[] args) {
        int nums[] = {-2,1,-3,4,-1,2,1,-5,4};
        System.out.println(maxSubArray_bruteForce(nums));
    }
}
