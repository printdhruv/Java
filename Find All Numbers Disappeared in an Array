/* Programmer     : Dhruv Patel
*  Problem Name   : Find All Numbers Disappeared in an Array 
*  Used In        : leetcode
*  Used As        : Practice_Question
*  Problem        : 448
*  Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
*  Find all the elements of [1, n] inclusive that do not appear in this array.
*  Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.
*  Example: 
*  Input  =>
*         [4,3,2,7,8,2,3,1]
*  Output =>
*         [5,6]
*  Thoughts =>
*             We can achieve the task by throwing all numbers into HashSet which will have only unique elements and hence the 
*             duplicates will removed. In the second loop, we remove the elements if it exist and add if not.At the end of 
*             second loop we will have a missing numbers.
public class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        Set<Integer> s1 = new HashSet<>();
        for(int i : nums){
            s1.add(i);
        }
        
        for(int i = 1 ; i<=nums.length ; i++){
            if(s1.contains(i)){
                s1.remove(i);
            }else{
                s1.add(i);
            }
        }
         List<Integer> list = new ArrayList<Integer>(s1);
        return list;
    }
}
