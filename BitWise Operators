/* Programmer     : Dhruv Patel
*  Problem Name   : XOR
*  Used In        : Practice
*  Used As        : BitWise Operators
*  Problem        :
*                   Usage of bitwise operators in JAVA.
*  Thoughts       => 
*                    Brute Force / Naive Approach :- We are using inbuilt set operation methods to manipulate the
*                                                    values.We are using the 'OR','AND','XOR','flip' methods.
*/
class Solution {
    public static void main(String args[]) {
        java.util.BitSet set_A = new java.util.BitSet(16);
        java.util.BitSet set_B = new java.util.BitSet(16);
        java.util.BitSet set_C = new java.util.BitSet(16);
        for (int i = 0; i < 16; i++) {
            set_A.set(i, true);
            set_B.set(i, false);
            set_C.set(i, true);
        }
        set_A.or(set_B);
        System.out.println("set_A = " + set_A);
        System.out.println("set_B = " + set_B);
        set_A.and(set_B);
        System.out.println("set_A = " + set_A);
        System.out.println("set_B = " + set_B);
        set_A.or(set_C);
        System.out.println("set_A = " + set_A);
        System.out.println("set_B = " + set_B);
        set_A.xor(set_C);
        System.out.println("set_A = " + set_A);
        System.out.println("set_B = " + set_B);
        System.out.println("set_C = " + set_C);
        set_C.flip(0, set_C.length());
        System.out.println("set_C = " + set_C);
        int this_ = 0xf0;
        int that = 0x55;
            //        System.out.println("x " + Integer.valueOf(Integer.toBinaryString(this_), 16));
            //        System.out.println("y " + Integer.valueOf(Integer.toBinaryString(that), 16));
            //        System.out.println("x & y" + Integer.valueOf(Integer.toBinaryString(this_ & that), 16));
            //        System.out.println("x | y" + Integer.valueOf(Integer.toBinaryString(this_ | that), 16));
            //        System.out.println("x ^ y" + Integer.valueOf(Integer.toBinaryString(this_ ^ that), 16));
            //        System.out.println("~x " + Integer.valueOf(Integer.toBinaryString(~this_), 16));
            //        System.out.println("x>>2 " + Integer.valueOf(Integer.toBinaryString(this_ >> 2), 16));
            //        System.out.println("x<<1 " + Integer.valueOf(Integer.toBinaryString(this_ << 1), 16));
        int i = 14;
        int j = 15;
        System.out.println(Integer.toBinaryString(i));
        System.out.println(Integer.toBinaryString(j));
            /* Test to check whether the lowest bit is on
             * or not.The lowest bit is the least significant
             * bit and the highest bit is the most significant
             * bit.The layman term is known as rightmost and leftmost
             * bits.
             */
        System.out.println("The lowest bit is 1 in 15 " + Integer.toBinaryString(15));
        System.out.println(Integer.toBinaryString(15 & 1));                                 // 'True' as the lowest bit is on.
        System.out.println(Integer.toBinaryString(8 & 1));                                  // 'False' as the lowest bit is off.
        System.out.println("setting the lowest bit " + Integer.toBinaryString(14 | 1));     // 'Toggling' the lowest bit.
        System.out.println("Clearing the lowest bit " + Integer.toBinaryString(15 ^ 1));    // 'Exclusive - or' will clear it.
        System.out.println("Union of two " + Integer.toBinaryString(i | j));                // 'Union' can be tackled with 'or'.
        System.out.println("Intersection of two " + Integer.toBinaryString(i & j));         // 'Intersect' can be tackled with 'and'.
        System.out.println("Remove j from i " + Integer.toBinaryString(i ^ ~j));            // 'Remove' the Negation(j) from i.
        System.out.println("Is i is a subset of j " + Integer.toBinaryString(j & i)         // 'Subset' by checking the equality.
                .equals(Integer.toBinaryString(i)));


    }
}
