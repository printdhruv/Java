/* Programmer     : Dhruv Patel
*  Problem Name   : Factorial Trailing Zeroes
*  Used In        : Leetcode
*  Used As        : 172
*  Problem        :
*                    Given an integer n, return the number of trailing zeroes in n!.
*                    Note:    Your solution should be in logarithmic time complexity.
*                    Credits:
*                             Special thanks to @ts for adding this problem and creating all test cases.
*  Thoughts       => 
*                    Brute Force / Naive Approach :-
*                                                    The native approach will be to calculate the straight answer with a DP.
*                                                    Once,we get the answer we simply call zeros function to calculate the 
*                                                    the number of trailing zeroes in the value and simply return it.
*                                                    It uses O(N) space with the time-complexity of O(N).
*                    Optimized Version :-
*                                         The optimized version will be to use various math tricks to solve it in logarithmic scale.
*                                         We can do it by calculating the values by dividing a number by 5 as it can be multiplied with
*                                         2 in order to get the result 10.which has trailing zeros.The solution runs in O(log(N)) space 
*                                         complexity and O(1) memory.
*/
import java.math.BigDecimal;
import java.time.Duration;
import java.time.Instant;

public class Factorial_Trailing_Zeroes {
    public static int zeros(String n) {
        int a = 0;
        for (int x = n.length() - 1; x >= 0; x--) {
            if (Character.valueOf(n.charAt(x)) == 48) {         // Comparing it with '0'
                a++;
            } else {
                break;                                          //  We break the loop if we don't see zero
            }
        }
        return a;
    }

    public static int trailingZeroes(int n) {
        int answer = 0;
        while (n >= 5) {
            answer += n / 5;
            n /= 5;
        }
        return answer;
    }

    public static int fact(int n) {
        BigDecimal[] f = new BigDecimal[n + 1];
        BigDecimal init = new BigDecimal(1);
        f[0] = init;
        for (int i = 1; i <= n; i++) {
            f[i] = f[i - 1].multiply(new BigDecimal(i));
        }
        return zeros(String.valueOf(f[n]));
    }

    public static void main(String args[]) {
        int n = 9999;
        Instant start = Instant.now();
        System.out.println(fact(n));
        System.out.println("Brute Force : " + Duration.between(Instant.now(), start).toMillis());
        start = Instant.now();
        System.out.println(trailingZeroes(n));
        System.out.println("Optimized Force : " + Duration.between(Instant.now(), start).toMillis());
    }
}
