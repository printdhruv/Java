/* Programmer     : Dhruv Patel
*  Problem Name   : Binary Tree Level Order Traversal II
*  Used In        : Leetcode
*  Used As        : 107
*  Problem        :
*                   Given a binary tree, return the bottom-up level order traversal of its nodes' values. 
*                   (ie, from left to right, level by level from leaf to root).
*                       For example:
*                               Given binary tree [3,9,20,null,null,15,7],    
*
*  Definition     : 
*                       public class TreeNode {
*                           int val;
*                           TreeNode left;
*                           TreeNode right;
*                           TreeNode(int x) { 
*                               val = x; 
*                           }
*                       }
*
*  Thoughts       => The problem can be solved by the level order traversal by performing the Breath First 
*                    Search using a queue.We merge the elements by level and add them to the list.The problem 
*                    states to return a list of a list with bottom up traversal.Hence,we have used a stack to 
*                    push all elements into it while algorithm is running. Once, it finish lookup, we simply 
*                    add it to the List<List<>> by poping the elements.
*  
*/

package solution;
import java.util.*;
import java.util.ArrayList;
import java.util.List;
    
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        List<List<Integer>> answer = new ArrayList<List<Integer>>();
        if(root == null) {
            return answer;
        }
        Stack stack = new Stack();
        queue.add(root);
        Set<Integer> set = new HashSet<>();
        while(!queue.isEmpty()){                                              // Performing BFS 
            List<Integer> list_ = new ArrayList<>();
            for(TreeNode each : queue){
                list_.add(each.val);                                          // Lookup the elements at nth level
            }
            stack.push(list_);                                                // Push the list to the stack to maintain LIFO order
            int len = queue.size();
            while(--len>=0) {                                                 // We look for nth + 1 level to add nodes
                TreeNode temp = queue.poll();
                if (temp.left != null) {
                    queue.add(temp.left);
                }
                if (temp.right != null) {
                    queue.add(temp.right);
                }
            }
        }
        while(!stack.isEmpty()){
            answer.add((List<Integer>)stack.pop());                            // Returning the list with LIFO order                                      
        }
        return answer;   
    }
public static void main(String args[]) {
        TreeNode head = new TreeNode(1);
        head.left = new TreeNode(2);
        head.right = new TreeNode(3);
        head.left.left = new TreeNode(4);
        head.right.right = new TreeNode(5);
        System.out.println(levelOrderBottom(head));
    }
}
