/* Programmer     : Dhruv Patel
*  Problem Name   : Pascal's Triangle
*  Used In        : Leetcode
*  Used As        : 118
*  Problem        :
*                    Given numRows, generate the first numRows of Pascal's triangle.
*  For example, given numRows = 5,
*                    Pascal Triangle for total rows 0 []
*                    Pascal Triangle for total rows 1 [[1]]
*                    Pascal Triangle for total rows 2 [[1], [1, 1]]
*                    Pascal Triangle for total rows 3 [[1], [1, 1], [1, 2, 1]]
*                    Pascal Triangle for total rows 4 [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]
*                    Pascal Triangle for total rows 5 [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
*
*  Thoughts       => The given problem is broken down into simple previous lookup and building up the current row.
*                    We hard code the values for zero row as [] and first row as [[1]]. Also, In Each row we set
*                    index 0 as 1 and the (row.length-1) as 1.The rest values are computed from the previous list
*                    with this formula, the current index = previous_list.get([current_index-1]+[current_index])
*                    
*/
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Main {

    public static List<List<Integer>> generate(int numRows) {
        List<List<Integer>> answer = new ArrayList<>();
        List<Integer> firstRowValue = new ArrayList<>();
        if (numRows == 0) {
            return answer;                                                         // Hard coding value for no rows. []
        }
        firstRowValue.add(1);                                                      // Hard Coding value for row 1.[[1]]
        answer.add(firstRowValue);
        for (int i = 1; i < numRows; i++) {
            List<Integer> listForEachRow = Arrays.asList(new Integer[i + 1]);      // List for each row with size of row+1
            listForEachRow.set(0, 1);                                              // Setting the value for first position in the row
            listForEachRow.set(i, 1);                                              // Setting the value for last position in the row
            List<Integer> listForPreviousRow = new ArrayList<>();                  // Initializing the list for the previous row
            listForPreviousRow = answer.get(i - 1);                                // Getting the previous row list
            for (int j = 1; j < listForEachRow.size() - 1; j++) {
                listForEachRow.set(j, listForPreviousRow.get(j - 1) + listForPreviousRow.get(j));
                                                                                   // Filling the matrix for the each row by looking back
            }
            answer.add(listForEachRow);                                            // Adding the result for the computed row
        }
        return answer;
    }

    public static void main(String[] args) {
        for (int i = 0; i <= 10; i++) {
            System.out.println("Pascal Triangle for " + i + " " + (generate(i)));  // Iterating through row 1 to 10.
        }
    }
}
