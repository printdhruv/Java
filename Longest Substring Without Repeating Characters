/* Programmer     : Dhruv Patel
*  Problem Name   : Longest Substring Without Repeating Characters
*  Used In        : leetcode.com
*  Used As        : 3
*  Problem        =>
*                   Given a string, find the length of the longest substring without repeating characters.
*                   Examples:
*                           Given "abcabcbb", the answer is "abc", which the length is 3.
*                           Given "bbbbb", the answer is "b", with the length of 1.
*                           Given "pwwkew", the answer is "wke", with the length of 3. Note that 
*                           the answer must be a substring, "pwke" is a subsequence and not a substring.
*  Thoughts       =>
*                   Brute-Force :
*                                We can solve this problem with two nested for loops. We can iterate with every index and
*                                can find the longest word inside it.The longest word must be sequential in other words with
*                                unique characters. We can use hashset to to have that functionality.It passes 98.06%.
*                                test cases but fails rest in terms of time complexity.
*  Time Complexity:
*                   O(N^3)       Brute - Force
*/

public static int longestPalindrome(String s) {
        if (s.length() <= 1) {
            return s.length();
        }
        int max = 1;
        for (int i = 0; i < s.length() - 1; i++) {
            for (int j = i + 1; j < s.length(); j++) {
                Set<Character> set = new HashSet<>();
                String test = s.substring(i, j + 1);
                System.out.println("test = " + test);
                for (char c : test.toCharArray()) {
                    if (!set.contains(c)) {
                        set.add(c);
                    } else {
                        break;
                    }
                }
                max = Math.max(max, set.size());
            }
        }
        return max;
    }
